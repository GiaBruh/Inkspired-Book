-- This script was generated by the ERD tool in pgAdmin 4. v1.5
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;



CREATE TABLE IF NOT EXISTS public."user"
(
    id integer NOT NULL,
    email_address character varying(100) NOT NULL,
    username character varying(100) NOT NULL,
    password character varying(100) NOT NULL,
    full_name character varying(100) NOT NULL,
    gender character varying(10) NOT NULL,
    birthday date NOT NULL,
    phone_number character varying(15) NOT NULL,
    user_image character varying(250),
    user_status boolean NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.address
(
    address_id integer NOT NULL,
    street_name character varying(100) NOT NULL,
    ward character varying(50) NOT NULL,
    district character varying(50) NOT NULL,
    city character varying(50) NOT NULL,
    province character varying(50) NOT NULL,
    postal_code character varying(50) NOT NULL,
    PRIMARY KEY (address_id)
);

CREATE TABLE IF NOT EXISTS public.user_address
(
    user_id integer NOT NULL,
    address_id integer NOT NULL,
    is_default boolean NOT NULL
);

CREATE TABLE IF NOT EXISTS public.user_role
(
    user_id integer NOT NULL,
    role_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.role
(
    role_id integer NOT NULL,
    type character varying(20) NOT NULL,
    PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS public.review
(
    review_id integer NOT NULL,
    review_date date NOT NULL,
    user_id integer NOT NULL,
    ordered_book_id integer NOT NULL,
    rating integer NOT NULL,
    comment text,
    PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.payment_method
(
    payment_method_id integer NOT NULL,
    user_id integer NOT NULL,
    payment_type_id integer NOT NULL,
    provider character varying(50),
    card_number character varying(50),
    expiry_date date,
    card_owner character varying(100),
    PRIMARY KEY (payment_method_id)
);

CREATE TABLE IF NOT EXISTS public.payment_type
(
    payment_type_id integer NOT NULL,
    type character varying(10) NOT NULL,
    PRIMARY KEY (payment_type_id)
);

CREATE TABLE IF NOT EXISTS public."order"
(
    order_id integer NOT NULL,
    user_id integer NOT NULL,
    order_date date NOT NULL,
    payment_method_id integer NOT NULL,
    shipping_address_id integer NOT NULL,
    shipping_method integer NOT NULL,
    order_total bigint NOT NULL,
    order_status integer NOT NULL,
    PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public.shipping_method
(
    shipping_method_id integer NOT NULL,
    name character varying (100) NOT NULL,
    price bigint NOT NULL,
    PRIMARY KEY (shipping_method_id)
);

CREATE TABLE IF NOT EXISTS public.order_status
(
    order_status_id integer NOT NULL,
    status character varying (20) NOT NULL,
    PRIMARY KEY (order_status_id)
);

CREATE TABLE IF NOT EXISTS public.wishlist
(
    wishlist_id integer NOT NULL,
    book_id integer NOT NULL,
    user_id integer NOT NULL,
    description text,
    PRIMARY KEY (wishlist_id)
);

CREATE TABLE IF NOT EXISTS public.order_detail
(
    order_detail_id integer NOT NULL,
    book_id integer NOT NULL,
    order_id integer NOT NULL,
    PRIMARY KEY (order_detail_id)
);

CREATE TABLE IF NOT EXISTS public.shopping_cart
(
    shopping_cart_id integer NOT NULL,
    user_id integer NOT NULL,
    book_id integer NOT NULL,
    quantity integer NOT NULL,
    PRIMARY KEY (shopping_cart_id)
);

CREATE TABLE IF NOT EXISTS public.book
(
    book_id integer NOT NULL,
    title character varying(100) NOT NULL,
    book_image character varying(250) NOT NULL,
    publication_date date NOT NULL,
    quantity integer NOT NULL,
    price bigint NOT NULL,
    author_id integer NOT NULL,
    publisher_id integer NOT NULL,
    book_description text,
    is_available boolean NOT NULL,
    PRIMARY KEY (book_id)
);

CREATE TABLE IF NOT EXISTS public.author
(
    author_id integer NOT NULL,
    author_fullname character varying(100) NOT NULL,
    author_image character varying(250) NOT NULL,
    author_description text,
    PRIMARY KEY (author_id)
);

CREATE TABLE IF NOT EXISTS public.category
(
    category_id integer NOT NULL,
    category_name character varying(50) NOT NULL,
    PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.category_book
(
    book_id integer NOT NULL,
    category_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.publisher
(
    publisher_id integer NOT NULL,
    publisher_name character varying (100) NOT NULL,
    PRIMARY KEY (publisher_id)
);

ALTER TABLE IF EXISTS public.user_address
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.user_address
    ADD CONSTRAINT address_id FOREIGN KEY (address_id)
    REFERENCES public.address (address_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.user_role
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.user_role
    ADD CONSTRAINT role_id FOREIGN KEY (role_id)
    REFERENCES public.role (role_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.review
    ADD FOREIGN KEY (ordered_book_id)
    REFERENCES public.order_detail (order_detail_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.payment_method
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.payment_method
    ADD CONSTRAINT payment_type_id FOREIGN KEY (payment_type_id)
    REFERENCES public.payment_type (payment_type_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public."order"
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public."order"
    ADD CONSTRAINT payment_method_id FOREIGN KEY (payment_method_id)
    REFERENCES public.payment_method (payment_method_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public."order"
    ADD CONSTRAINT shipping_address_id FOREIGN KEY (shipping_address_id)
    REFERENCES public.address (address_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public."order"
    ADD CONSTRAINT order_status_id FOREIGN KEY (order_status)
    REFERENCES public.order_status (order_status_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public."order"
    ADD CONSTRAINT shipping_method_id FOREIGN KEY (shipping_method)
    REFERENCES public.shipping_method (shipping_method_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.wishlist
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.wishlist
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (book_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.order_detail
    ADD FOREIGN KEY (order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.order_detail
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (book_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.shopping_cart
    ADD CONSTRAINT user_id FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.shopping_cart
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (book_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.book
    ADD FOREIGN KEY (author_id)
    REFERENCES public.author (author_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.book
    ADD FOREIGN KEY (publisher_id)
    REFERENCES public.publisher (publisher_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.category_book
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (book_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;


ALTER TABLE IF EXISTS public.category_book
    ADD FOREIGN KEY (category_id)
    REFERENCES public.category (category_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    ;

END;

-- DROP SCHEMA public CASCADE;
-- CREATE SCHEMA public;